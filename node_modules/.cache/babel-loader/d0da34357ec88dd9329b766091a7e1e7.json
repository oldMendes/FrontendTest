{"ast":null,"code":"import React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nexport default class MaskedInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this._onChange = e => {\n      // console.log('onChange', JSON.stringify(getSelection(this.input)), e.target.value)\n      let maskValue = this.mask.getValue();\n      let incomingValue = e.target.value;\n\n      if (incomingValue !== maskValue) {\n        // only modify mask if form contents actually changed\n        this._updateMaskSelection();\n\n        this.mask.setValue(incomingValue); // write the whole updated value into the mask\n\n        this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n\n        this._updateInputSelection();\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(e);\n      }\n    };\n\n    this._onKeyDown = e => {\n      setTimeout(() => {\n        this.input.classList[this.input.value ? 'add' : 'remove']('has-value');\n      }, 100);\n\n      if (isUndo(e)) {\n        e.preventDefault();\n\n        if (this.mask.undo()) {\n          this.setInputValue(this._getDisplayValue());\n\n          this._updateInputSelection();\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n\n        return;\n      } else if (isRedo(e)) {\n        e.preventDefault();\n\n        if (this.mask.redo()) {\n          this.setInputValue(this._getDisplayValue());\n\n          this._updateInputSelection();\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n\n        return;\n      }\n\n      if (e.key === 'Backspace') {\n        e.preventDefault();\n\n        this._updateMaskSelection();\n\n        if (this.mask.backspace()) {\n          let value = this._getDisplayValue();\n\n          this.setInputValue(value);\n\n          if (value) {\n            this._updateInputSelection();\n          }\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n      }\n    };\n\n    this._onKeyPress = e => {\n      // console.log('onKeyPress', JSON.stringify(getSelection(this.input)), e.key, e.target.value)\n      // Ignore modified key presses\n      // Ignore enter key to allow form submission\n      if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n        return;\n      }\n\n      e.preventDefault();\n\n      this._updateMaskSelection();\n\n      if (this.mask.input(e.key || e.data)) {\n        this.setInputValue(this.mask.getValue());\n\n        this._updateInputSelection();\n\n        if (this.props.onChange) {\n          this.props.onChange(e);\n        }\n      }\n    };\n\n    this._onPaste = e => {\n      e.preventDefault();\n\n      this._updateMaskSelection(); // getData value needed for IE also works in FF & Chrome\n\n\n      if (this.mask.paste(e.clipboardData.getData('Text'))) {\n        // @ts-ignore\n        this.setInputValue(this.mask.getValue()); // Timeout needed for IE\n\n        setTimeout(() => this._updateInputSelection(), 0);\n\n        if (this.props.onChange) {\n          // @ts-ignore\n          this.props.onChange(e);\n        }\n      }\n    };\n\n    this.getInputProps = () => {\n      let maxLength = this.mask.pattern.length;\n\n      let eventHandlers = this._getEventHandlers();\n\n      let {\n        placeholder = this.mask.emptyValue\n      } = this.props;\n      let {\n        placeholderChar,\n        formatCharacters,\n        ...cleanedProps\n      } = this.props;\n      const props = { ...cleanedProps,\n        ...eventHandlers,\n        maxLength,\n        placeholder\n      };\n      delete props.value;\n      return props;\n    };\n\n    this._lastValue = null;\n\n    this.setInputValue = value => {\n      if (!this._Input || !this._Input.input) return;\n      if (value === this._lastValue) return;\n      this._lastValue = value;\n\n      this._Input.setState({\n        value\n      });\n\n      this._Input.input.value = value;\n    };\n\n    this._Input = null;\n\n    this.handleInputRef = ref => {\n      if (!ref) return;\n      this._Input = ref;\n      this.input = ref.input;\n\n      if (this._lastValue === null && typeof this.props.defaultValue === 'string') {\n        this.mask.setValue(this.props.defaultValue); // write the whole updated value into the mask\n\n        this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n      }\n    };\n\n    let options = {\n      pattern: this.props.mask,\n      value: this.props.value,\n      formatCharacters: this.props.formatCharacters\n    };\n\n    if (this.props.placeholderChar) {\n      options.placeholderChar = this.props.placeholderChar;\n    }\n\n    this.mask = new InputMask(options);\n  }\n\n  componentDidMount() {\n    this.setInputValue(this._getDisplayValue());\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.mask !== nextProps.mask && this.props.value !== nextProps.mask) {\n      // if we get a new value and a new mask at the same time\n      // check if the mask.value is still the initial value\n      // - if so use the nextProps value\n      // - otherwise the `this.mask` has a value for us (most likely from paste action)\n      if (this.mask.getValue() === this.mask.emptyValue) {\n        this.mask.setPattern(nextProps.mask, {\n          value: nextProps.value\n        });\n      } else {\n        this.mask.setPattern(nextProps.mask, {\n          value: this.mask.getRawValue()\n        });\n      }\n    } else if (this.props.mask !== nextProps.mask) {\n      this.mask.setPattern(nextProps.mask, {\n        value: this.mask.getRawValue()\n      });\n    }\n\n    if (this.props.value !== nextProps.value) {\n      this.mask.setValue(nextProps.value);\n      this.setInputValue(this._getDisplayValue());\n    }\n  }\n\n  componentWillUpdate(nextProps) {\n    if (!this.props.mask) return null;\n\n    if (nextProps.mask !== this.props.mask) {\n      this._updatePattern(nextProps);\n    }\n\n    return;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.mask) return null;\n\n    if (prevProps.mask !== this.props.mask && this.mask.selection.start) {\n      this._updateInputSelection();\n    }\n\n    return;\n  }\n\n  _updatePattern(props) {\n    this.mask.setPattern(props.mask, {\n      value: this.mask.getRawValue(),\n      selection: getSelection(this.input)\n    });\n  }\n\n  _updateMaskSelection() {\n    this.mask.selection = getSelection(this.input);\n  }\n\n  _updateInputSelection() {\n    setSelection(this.input, this.mask.selection);\n  }\n\n  _getDisplayValue() {\n    let value = this.mask.getValue();\n    return value === this.mask.emptyValue ? '' : value;\n  }\n\n  _keyPressPropName() {\n    if (typeof navigator !== 'undefined') {\n      return navigator.userAgent.match(/Android/i) ? 'onBeforeInput' : 'onKeyPress';\n    }\n\n    return 'onKeyPress';\n  }\n\n  _getEventHandlers() {\n    return {\n      onChange: this._onChange,\n      onKeyDown: this._onKeyDown,\n      onPaste: this._onPaste,\n      [this._keyPressPropName()]: this._onKeyPress\n    };\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  render() {\n    return React.createElement(Input, Object.assign({}, this.getInputProps(), {\n      ref: this.handleInputRef\n    }));\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/MaskedInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAA6B,SAA7B,QAA8D,OAA9D;AACA,SAAS,KAAT,QAAsB,MAAtB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,SAAS,MAAT,EAAiB,MAAjB,EAAyB,YAAzB,EAAuC,YAAvC,QAA2D,WAA3D;AAcA,eAAc,MAAO,WAAP,SAA2B,SAA3B,CAAsD;AAIlE,EAAA,WAAA,CAAY,KAAZ,EAAmC;AACjC,UAAM,KAAN;;AA4EF,SAAA,SAAA,GAAa,CAAD,IAAoB;AAC9B;AAEA,UAAI,SAAS,GAAG,KAAK,IAAL,CAAU,QAAV,EAAhB;AACA,UAAI,aAAa,GAAG,CAAC,CAAC,MAAF,CAAS,KAA7B;;AACA,UAAI,aAAa,KAAK,SAAtB,EAAiC;AAC/B;AACA,aAAK,oBAAL;;AACA,aAAK,IAAL,CAAU,QAAV,CAAmB,aAAnB,EAH+B,CAGI;;AACnC,aAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB,EAJ+B,CAIc;;AAC7C,aAAK,qBAAL;AACD;;AAED,UAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,aAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF,KAhBD;;AAkBA,SAAA,UAAA,GAAc,CAAD,IAAsB;AACjC,MAAA,UAAU,CAAC,MAAK;AACd,aAAK,KAAL,CAAW,SAAX,CAAqB,KAAK,KAAL,CAAW,KAAX,GAAmB,KAAnB,GAA2B,QAAhD,EAA0D,WAA1D;AACD,OAFS,EAEP,GAFO,CAAV;;AAIA,UAAI,MAAM,CAAC,CAAD,CAAV,EAAe;AACb,QAAA,CAAC,CAAC,cAAF;;AACA,YAAI,KAAK,IAAL,CAAU,IAAV,EAAJ,EAAsB;AACpB,eAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB;;AACA,eAAK,qBAAL;;AACA,cAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF;;AACD;AACD,OAVD,MAUO,IAAI,MAAM,CAAC,CAAD,CAAV,EAAe;AACpB,QAAA,CAAC,CAAC,cAAF;;AACA,YAAI,KAAK,IAAL,CAAU,IAAV,EAAJ,EAAsB;AACpB,eAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB;;AACA,eAAK,qBAAL;;AACA,cAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF;;AACD;AACD;;AAED,UAAI,CAAC,CAAC,GAAF,KAAU,WAAd,EAA2B;AACzB,QAAA,CAAC,CAAC,cAAF;;AACA,aAAK,oBAAL;;AACA,YAAI,KAAK,IAAL,CAAU,SAAV,EAAJ,EAA2B;AACzB,cAAI,KAAK,GAAG,KAAK,gBAAL,EAAZ;;AACA,eAAK,aAAL,CAAmB,KAAnB;;AACA,cAAI,KAAJ,EAAW;AACT,iBAAK,qBAAL;AACD;;AACD,cAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF;AACF;AACF,KAzCD;;AA2CA,SAAA,WAAA,GAAe,CAAD,IAAsB;AAClC;AAEA;AACA;AACA,UAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,MAAf,IAAyB,CAAC,CAAC,OAA3B,IAAsC,CAAC,CAAC,GAAF,KAAU,OAApD,EAA6D;AAC3D;AACD;;AAED,MAAA,CAAC,CAAC,cAAF;;AACA,WAAK,oBAAL;;AACA,UAAI,KAAK,IAAL,CAAU,KAAV,CAAgB,CAAC,CAAC,GAAF,IAAS,CAAC,CAAC,IAA3B,CAAJ,EAAsC;AACpC,aAAK,aAAL,CAAmB,KAAK,IAAL,CAAU,QAAV,EAAnB;;AACA,aAAK,qBAAL;;AACA,YAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,eAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF;AACF,KAlBD;;AAoBA,SAAA,QAAA,GAAY,CAAD,IAAuB;AAChC,MAAA,CAAC,CAAC,cAAF;;AACA,WAAK,oBAAL,GAFgC,CAGhC;;;AACA,UAAI,KAAK,IAAL,CAAU,KAAV,CAAgB,CAAC,CAAC,aAAF,CAAgB,OAAhB,CAAwB,MAAxB,CAAhB,CAAJ,EAAsD;AACpD;AACA,aAAK,aAAL,CAAmB,KAAK,IAAL,CAAU,QAAV,EAAnB,EAFoD,CAGpD;;AACA,QAAA,UAAU,CAAC,MAAM,KAAK,qBAAL,EAAP,EAAqC,CAArC,CAAV;;AACA,YAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB;AACA,eAAK,KAAL,CAAW,QAAX,CAAoB,CAApB;AACD;AACF;AACF,KAdD;;AAqDA,SAAA,aAAA,GAAgB,MAAK;AACnB,UAAI,SAAS,GAAG,KAAK,IAAL,CAAU,OAAV,CAAkB,MAAlC;;AACA,UAAI,aAAa,GAAG,KAAK,iBAAL,EAApB;;AACA,UAAI;AAAE,QAAA,WAAW,GAAG,KAAK,IAAL,CAAU;AAA1B,UAAyC,KAAK,KAAlD;AAEA,UAAI;AAAE,QAAA,eAAF;AAAmB,QAAA,gBAAnB;AAAqC,WAAG;AAAxC,UAAyD,KAAK,KAAlE;AACA,YAAM,KAAK,GAAG,EAAE,GAAG,YAAL;AAAmB,WAAG,aAAtB;AAAqC,QAAA,SAArC;AAAgD,QAAA;AAAhD,OAAd;AACA,aAAO,KAAK,CAAC,KAAb;AACA,aAAO,KAAP;AACD,KATD;;AAWA,SAAA,UAAA,GAAa,IAAb;;AACA,SAAA,aAAA,GAAiB,KAAD,IAAkB;AAChC,UAAI,CAAC,KAAK,MAAN,IAAgB,CAAC,KAAK,MAAL,CAAY,KAAjC,EAAwC;AACxC,UAAI,KAAK,KAAK,KAAK,UAAnB,EAA+B;AAE/B,WAAK,UAAL,GAAkB,KAAlB;;AACA,WAAK,MAAL,CAAY,QAAZ,CAAqB;AAAE,QAAA;AAAF,OAArB;;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,GAA0B,KAA1B;AACD,KAPD;;AASA,SAAA,MAAA,GAAuB,IAAvB;;AACA,SAAA,cAAA,GAAkB,GAAD,IAAe;AAC9B,UAAI,CAAC,GAAL,EAAU;AACV,WAAK,MAAL,GAAc,GAAd;AACA,WAAK,KAAL,GAAa,GAAG,CAAC,KAAjB;;AAEA,UACE,KAAK,UAAL,KAAoB,IAApB,IACA,OAAO,KAAK,KAAL,CAAW,YAAlB,KAAmC,QAFrC,EAGE;AACA,aAAK,IAAL,CAAU,QAAV,CAAmB,KAAK,KAAL,CAAW,YAA9B,EADA,CAC6C;;AAC7C,aAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB,EAFA,CAE6C;AAC9C;AACF,KAZD;;AAtOE,QAAI,OAAO,GAAQ;AACjB,MAAA,OAAO,EAAE,KAAK,KAAL,CAAW,IADH;AAEjB,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAFD;AAGjB,MAAA,gBAAgB,EAAE,KAAK,KAAL,CAAW;AAHZ,KAAnB;;AAMA,QAAI,KAAK,KAAL,CAAW,eAAf,EAAgC;AAC9B,MAAA,OAAO,CAAC,eAAR,GAA0B,KAAK,KAAL,CAAW,eAArC;AACD;;AAED,SAAK,IAAL,GAAY,IAAI,SAAJ,CAAc,OAAd,CAAZ;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,SAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB;AACD;;AAED,EAAA,yBAAyB,CAAC,SAAD,EAA4B;AACnD,QACE,KAAK,KAAL,CAAW,IAAX,KAAoB,SAAS,CAAC,IAA9B,IACA,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAS,CAAC,IAFjC,EAGE;AACA;AACA;AACA;AACA;AACA,UAAI,KAAK,IAAL,CAAU,QAAV,OAAyB,KAAK,IAAL,CAAU,UAAvC,EAAmD;AACjD,aAAK,IAAL,CAAU,UAAV,CAAqB,SAAS,CAAC,IAA/B,EAAqC;AAAE,UAAA,KAAK,EAAE,SAAS,CAAC;AAAnB,SAArC;AACD,OAFD,MAEO;AACL,aAAK,IAAL,CAAU,UAAV,CAAqB,SAAS,CAAC,IAA/B,EAAqC;AACnC,UAAA,KAAK,EAAE,KAAK,IAAL,CAAU,WAAV;AAD4B,SAArC;AAGD;AACF,KAfD,MAeO,IAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,SAAS,CAAC,IAAlC,EAAwC;AAC7C,WAAK,IAAL,CAAU,UAAV,CAAqB,SAAS,CAAC,IAA/B,EAAqC;AAAE,QAAA,KAAK,EAAE,KAAK,IAAL,CAAU,WAAV;AAAT,OAArC;AACD;;AAED,QAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAS,CAAC,KAAnC,EAA0C;AACxC,WAAK,IAAL,CAAU,QAAV,CAAmB,SAAS,CAAC,KAA7B;AACA,WAAK,aAAL,CAAmB,KAAK,gBAAL,EAAnB;AACD;AACF;;AAED,EAAA,mBAAmB,CAAC,SAAD,EAA4B;AAC7C,QAAI,CAAC,KAAK,KAAL,CAAW,IAAhB,EAAsB,OAAO,IAAP;;AACtB,QAAI,SAAS,CAAC,IAAV,KAAmB,KAAK,KAAL,CAAW,IAAlC,EAAwC;AACtC,WAAK,cAAL,CAAoB,SAApB;AACD;;AACD;AACD;;AAED,EAAA,kBAAkB,CAAC,SAAD,EAA4B;AAC5C,QAAI,CAAC,KAAK,KAAL,CAAW,IAAhB,EAAsB,OAAO,IAAP;;AACtB,QAAI,SAAS,CAAC,IAAV,KAAmB,KAAK,KAAL,CAAW,IAA9B,IAAsC,KAAK,IAAL,CAAU,SAAV,CAAoB,KAA9D,EAAqE;AACnE,WAAK,qBAAL;AACD;;AACD;AACD;;AAED,EAAA,cAAc,CAAC,KAAD,EAAwB;AACpC,SAAK,IAAL,CAAU,UAAV,CAAqB,KAAK,CAAC,IAA3B,EAAiC;AAC/B,MAAA,KAAK,EAAE,KAAK,IAAL,CAAU,WAAV,EADwB;AAE/B,MAAA,SAAS,EAAE,YAAY,CAAC,KAAK,KAAN;AAFQ,KAAjC;AAID;;AAED,EAAA,oBAAoB,GAAA;AAClB,SAAK,IAAL,CAAU,SAAV,GAAsB,YAAY,CAAC,KAAK,KAAN,CAAlC;AACD;;AAED,EAAA,qBAAqB,GAAA;AACnB,IAAA,YAAY,CAAC,KAAK,KAAN,EAAa,KAAK,IAAL,CAAU,SAAvB,CAAZ;AACD;;AAmGD,EAAA,gBAAgB,GAAA;AACd,QAAI,KAAK,GAAG,KAAK,IAAL,CAAU,QAAV,EAAZ;AACA,WAAO,KAAK,KAAK,KAAK,IAAL,CAAU,UAApB,GAAiC,EAAjC,GAAsC,KAA7C;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,QAAI,OAAO,SAAP,KAAqB,WAAzB,EAAsC;AACpC,aAAO,SAAS,CAAC,SAAV,CAAoB,KAApB,CAA0B,UAA1B,IACH,eADG,GAEH,YAFJ;AAGD;;AACD,WAAO,YAAP;AACD;;AAED,EAAA,iBAAiB,GAAA;AAOf,WAAO;AACL,MAAA,QAAQ,EAAE,KAAK,SADV;AAEL,MAAA,SAAS,EAAE,KAAK,UAFX;AAGL,MAAA,OAAO,EAAE,KAAK,QAHT;AAIL,OAAC,KAAK,iBAAL,EAAD,GAA4B,KAAK;AAJ5B,KAAP;AAMD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,KAAL,CAAW,KAAX;AACD;;AAED,EAAA,IAAI,GAAA;AACF,SAAK,KAAL,CAAW,IAAX;AACD;;AAsCD,EAAA,MAAM,GAAA;AACJ,WAAO,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,aAAL,EAAL,EAAyB;AAAE,MAAA,GAAG,EAAE,KAAK;AAAZ,KAAzB,CAAN,CAAP;AACD;;AA7PiE","sourceRoot":"","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nexport default class MaskedInput extends Component {\n    constructor(props) {\n        super(props);\n        this._onChange = (e) => {\n            // console.log('onChange', JSON.stringify(getSelection(this.input)), e.target.value)\n            let maskValue = this.mask.getValue();\n            let incomingValue = e.target.value;\n            if (incomingValue !== maskValue) {\n                // only modify mask if form contents actually changed\n                this._updateMaskSelection();\n                this.mask.setValue(incomingValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n                this._updateInputSelection();\n            }\n            if (this.props.onChange) {\n                this.props.onChange(e);\n            }\n        };\n        this._onKeyDown = (e) => {\n            setTimeout(() => {\n                this.input.classList[this.input.value ? 'add' : 'remove']('has-value');\n            }, 100);\n            if (isUndo(e)) {\n                e.preventDefault();\n                if (this.mask.undo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            else if (isRedo(e)) {\n                e.preventDefault();\n                if (this.mask.redo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            if (e.key === 'Backspace') {\n                e.preventDefault();\n                this._updateMaskSelection();\n                if (this.mask.backspace()) {\n                    let value = this._getDisplayValue();\n                    this.setInputValue(value);\n                    if (value) {\n                        this._updateInputSelection();\n                    }\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n            }\n        };\n        this._onKeyPress = (e) => {\n            // console.log('onKeyPress', JSON.stringify(getSelection(this.input)), e.key, e.target.value)\n            // Ignore modified key presses\n            // Ignore enter key to allow form submission\n            if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n                return;\n            }\n            e.preventDefault();\n            this._updateMaskSelection();\n            if (this.mask.input(e.key || e.data)) {\n                this.setInputValue(this.mask.getValue());\n                this._updateInputSelection();\n                if (this.props.onChange) {\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this._onPaste = (e) => {\n            e.preventDefault();\n            this._updateMaskSelection();\n            // getData value needed for IE also works in FF & Chrome\n            if (this.mask.paste(e.clipboardData.getData('Text'))) {\n                // @ts-ignore\n                this.setInputValue(this.mask.getValue());\n                // Timeout needed for IE\n                setTimeout(() => this._updateInputSelection(), 0);\n                if (this.props.onChange) {\n                    // @ts-ignore\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this.getInputProps = () => {\n            let maxLength = this.mask.pattern.length;\n            let eventHandlers = this._getEventHandlers();\n            let { placeholder = this.mask.emptyValue } = this.props;\n            let { placeholderChar, formatCharacters, ...cleanedProps } = this.props;\n            const props = { ...cleanedProps, ...eventHandlers, maxLength, placeholder };\n            delete props.value;\n            return props;\n        };\n        this._lastValue = null;\n        this.setInputValue = (value) => {\n            if (!this._Input || !this._Input.input)\n                return;\n            if (value === this._lastValue)\n                return;\n            this._lastValue = value;\n            this._Input.setState({ value });\n            this._Input.input.value = value;\n        };\n        this._Input = null;\n        this.handleInputRef = (ref) => {\n            if (!ref)\n                return;\n            this._Input = ref;\n            this.input = ref.input;\n            if (this._lastValue === null &&\n                typeof this.props.defaultValue === 'string') {\n                this.mask.setValue(this.props.defaultValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n            }\n        };\n        let options = {\n            pattern: this.props.mask,\n            value: this.props.value,\n            formatCharacters: this.props.formatCharacters\n        };\n        if (this.props.placeholderChar) {\n            options.placeholderChar = this.props.placeholderChar;\n        }\n        this.mask = new InputMask(options);\n    }\n    componentDidMount() {\n        this.setInputValue(this._getDisplayValue());\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.props.mask !== nextProps.mask &&\n            this.props.value !== nextProps.mask) {\n            // if we get a new value and a new mask at the same time\n            // check if the mask.value is still the initial value\n            // - if so use the nextProps value\n            // - otherwise the `this.mask` has a value for us (most likely from paste action)\n            if (this.mask.getValue() === this.mask.emptyValue) {\n                this.mask.setPattern(nextProps.mask, { value: nextProps.value });\n            }\n            else {\n                this.mask.setPattern(nextProps.mask, {\n                    value: this.mask.getRawValue()\n                });\n            }\n        }\n        else if (this.props.mask !== nextProps.mask) {\n            this.mask.setPattern(nextProps.mask, { value: this.mask.getRawValue() });\n        }\n        if (this.props.value !== nextProps.value) {\n            this.mask.setValue(nextProps.value);\n            this.setInputValue(this._getDisplayValue());\n        }\n    }\n    componentWillUpdate(nextProps) {\n        if (!this.props.mask)\n            return null;\n        if (nextProps.mask !== this.props.mask) {\n            this._updatePattern(nextProps);\n        }\n        return;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.props.mask)\n            return null;\n        if (prevProps.mask !== this.props.mask && this.mask.selection.start) {\n            this._updateInputSelection();\n        }\n        return;\n    }\n    _updatePattern(props) {\n        this.mask.setPattern(props.mask, {\n            value: this.mask.getRawValue(),\n            selection: getSelection(this.input)\n        });\n    }\n    _updateMaskSelection() {\n        this.mask.selection = getSelection(this.input);\n    }\n    _updateInputSelection() {\n        setSelection(this.input, this.mask.selection);\n    }\n    _getDisplayValue() {\n        let value = this.mask.getValue();\n        return value === this.mask.emptyValue ? '' : value;\n    }\n    _keyPressPropName() {\n        if (typeof navigator !== 'undefined') {\n            return navigator.userAgent.match(/Android/i)\n                ? 'onBeforeInput'\n                : 'onKeyPress';\n        }\n        return 'onKeyPress';\n    }\n    _getEventHandlers() {\n        return {\n            onChange: this._onChange,\n            onKeyDown: this._onKeyDown,\n            onPaste: this._onPaste,\n            [this._keyPressPropName()]: this._onKeyPress\n        };\n    }\n    focus() {\n        this.input.focus();\n    }\n    blur() {\n        this.input.blur();\n    }\n    render() {\n        return React.createElement(Input, Object.assign({}, this.getInputProps(), { ref: this.handleInputRef }));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}